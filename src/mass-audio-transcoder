#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# mass-audio-transcoder
#
# Mass parallel Audio Transcoder ffmpeg frontend.
# Requires: Python 3, python-mutagen and a recent-ish (2017/18) ffmpeg
# command in PATH.
#
# Copyright 2018-2020, Ã˜yvind Stegard <oyvind@stegard.net>

from audio_collection_tools import *
from audio_collection_tools.mass_audio_transcoder import *
from audio_collection_tools.generate_playlists import write_pls, write_m3u

import argparse
import multiprocessing
import shutil
import re

def get_playlist_targetpaths_map(work_units):
    """Returns map of playlist input files to list of target paths."""
    val = {}
    for wu in work_units:
        if wu.source.playlist_file:
            val.setdefault(wu.source.playlist_file, []).append(wu.targetpath)

    return val

def write_playlist_files(work_units, destdir, overwrite=False, playlist_format=None):
    """Write any playlist files in work unit list to destination."""
    playlist_map = get_playlist_targetpaths_map(work_units)
    for playlist_file in playlist_map:
        destdir = os.path.realpath(destdir)
        if playlist_format:
            playlist_name = get_playlist_name(playlist_file)
            playlist_dest = os.path.join(destdir, playlist_name + '.' + playlist_format)
        else:
            playlist_dest = os.path.join(destdir, os.path.basename(playlist_file))

        if os.path.exists(playlist_dest):
            LOG.warn('File exists at destination and overwrite is not enabled: {}'.format(playlist_dest))
            continue
            
        playlist_paths = [os.path.relpath(filepath, destdir) for filepath in playlist_map[playlist_file]]
        LOG.info('Writing playlist {} ..'.format(playlist_dest))
        if is_pls_playlist(playlist_dest):
            write_pls(playlist_dest, playlist_paths)
        elif is_m3u_playlist(playlist_dest):
            write_m3u(playlist_dest, playlist_paths, True)
        else:
            raise ApplicationError('Cannot write such playlists: {}'.format(playlist_file))

def scan_inputs(inputs, transcode_spec, no_transcode_for=None):
    """Scans list of inputs and returns a list of Source instances."""
    sources = []
    for inputfile in inputs:
        LOG.info("Scanning input {} ..".format(inputfile))
        if is_playlist(inputfile):
            paths = get_audiofile_paths_from_playlist(inputfile)
            plsources = [Source(path, transcode_spec, inputfile, n, len(paths)) for n, path in enumerate(paths, 1)]
            sources.extend(plsources)
        else:
            paths = get_audiofile_paths(inputfile)
            sources.extend([Source(path, transcode_spec) for path in paths])

    for n, source in enumerate(sources, 1):
        source.filenumber = n
        source.totalfiles = len(sources)

        # Apply any no-transcode-for option
        if no_transcode_for is not None and source.filetype() in no_transcode_for:
            source.transcode_spec = TranscodeSpec('copy', False)

    return sources
    

def execute_work_unit(work_unit):
    """Executes work unit, typically this function expects to be called in a sub process.

    Returns the work_unit with updated status.
    """

    # We can do nothing here unless status is READY
    if work_unit.status is not Status.READY:
        return work_unit

    source, targetpath = work_unit.source, work_unit.targetpath

    try:
        os.makedirs(os.path.dirname(targetpath), exist_ok=True)
    except Exception as e:
        LOG.warn("Failed to create target directory '{}': {}".format(os.path.dirname(targetpath), str(e)))
        work_unit.status = Status.FAILED_IO
        return work_unit

    import signal
    signal.signal(signal.SIGINT, default_sigint_handler) # handle interrupts while working

    codec = source.transcode_spec.codec

    if (codec == 'copy') or (source.filetype() == FFMPEG_CODEC_EXT[codec]
                             and not source.transcode_spec.force_transcode):
        LOG.info('copy   {}'.format(targetpath))
        try:
            shutil.copy(source.filepath, targetpath)
            work_unit.status = Status.COMPLETED
        except KeyboardInterrupt:
            work_unit.status = Status.FAILED_ABORTED
            LOG.info('Shutdown.')
        except Exception as e:
            work_unit.status = Status.FAILED_IO
            LOG.warn("Failed to copy '{}' to '{}': {}".format(source.filepath, targetpath, str(e)))
    else:
        ffmpeg_args = ffmpeg_build_args(source.filepath, targetpath, source.transcode_spec.codec,
                                        source.transcode_spec.quality,
                                        source.transcode_spec.bitrate)
        LOG.debug(ffmpeg_args)

        LOG.info('ffmpeg {}'.format(targetpath))
        try:
            with subprocess.Popen([FFMPEG_EXECUTABLE] + ffmpeg_args, stdin=subprocess.DEVNULL,
                                  stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) as proc:

                returncode = proc.wait()
                if returncode != 0:
                    work_unit.status = Status.FAILED_FFMPEG
                    LOG.warn("ffmpeg failed for input '{}' with code {}".format(source.filepath, returncode))
                    LOG.warn("ffmpeg command was: '{}'".format(" ".join([FFMPEG_EXECUTABLE] + ffmpeg_args)))
                else:
                    work_unit.status = Status.COMPLETED
                    
        except KeyboardInterrupt:
            work_unit.status = Status.FAILED_ABORTED
            LOG.info('Shutdown.')
        except Exception as e:
            work_unit.status = Status.FAILED_FFMPEG
            LOG.warn("Failed to execute ffmpeg for input '{}': {}".format(source.filepath, str(e)))
            LOG.warn("ffmpeg command was: '{}'".format(" ".join([FFMPEG_EXECUTABLE] + ffmpeg_args)))

    signal.signal(signal.SIGINT, signal.SIG_IGN) # ignore interrupts while idle

    return work_unit

class HelpTemplatesAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, **kwargs):
         super().__init__(option_strings, dest, nargs='?', **kwargs)
    def __call__(self, parser, namespace, values, option_string=None):
        doc = """Templates are used for naming transcoded target files automatically.

        One template is used for audio files that are not part of any
        playlist, and another one for playlists. Template values should
        never include file extension, which is handled automatically and
        depends on the target format/codec.
        
        Available template variables:
        <a>, <artist>                    artist metadata
        <b>, <album>                     album metadata
        <t>, <title>                     title metadata
        <aa>, <albumartist>              album-artist metadata
        <aaa>, <albumartist_or_artist>   album-artist if available, otherwise
                                         artist
        <tn>, <track>, <tracknumber>     track number metadata
        <tt>, <tracktotal>               total number of tracks metadata
        <dn>, <discnumber>               disc number metadata
        <filename>                       base file name of source file
        <filename_noext>                 base file name of source file
                                         without extension
        <parentdir_basename>             base name of source file parent directory
        <ext>                            source file extension
        <filenumber>                     padded source file number with regard to
                                         number of audio files in transcoding job
        <totalfiles>                     total number of audio files in trasncoding job
        <playlist_name>                  name of playlist an audio file is part of or
                                         empty string if none
        <playlist_filenumber>            audio file number in a playlist, or empty
                                         if not part of a playlist
        <playlist_totalfiles>            total number of files in a playlist
                                         the audio file is part of

        Documentation from the template expansion function follows:

        """ + expand_template.__doc__

        doc = "\n".join([re.sub(r'^\s{0,8}','',line) for line in doc.split('\n')])
        print(doc)
        sys.exit(0)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description="""Mass Parallel Audio Transcoder. Transcode any
    number of playlists and audio files/dirs in parallel to a
    destination directory. Requires the 'ffmpeg' command in system
    path.
    """,epilog="""With regard to playlists, the default naming template will cause a
    playlist to turn into its own directory in the destination dir, with
    all the files directly below, named in order. This is to make it
    compatible with devices and players that do not understand playlist
    files. Change the naming template if you do not want this behaviour.

    You are free to use slashes in the naming templates to generate the
    desired structure under the destination directory.

    Supported input playlist formats: m3u, m3u8, pls.
    """)

    parser.add_argument('inputs', metavar='INPUT', type=str, nargs='+',
                        help="""Directory trees containing audio
                        files, audio files and/or playlists pointing
                        to audio files. Always operates recursively on
                        directories. Only processes playlists directly
                        provided as arguments.""")

    parser.add_argument('destdir', metavar='DESTDIR', type=str,
                        help="""Destination root directory. Paths and
                        files under this directory will be generated
                        based on templates with data from audio file
                        tags and playlist names.""")

    parser.add_argument('--help-templates', action=HelpTemplatesAction)

    parser.add_argument('-t', '--template', type=str, dest='template',
                        help="""Select naming template for audio files that
                        are not part of playlists.""",
                        default=DEFAULT_TEMPLATE)

    parser.add_argument('-p', '--playlist-template', type=str,
                        dest='playlist_template', help="""Select
                        naming template for files that are part of
                        playlists.""",
                        default=DEFAULT_TEMPLATE_PLAYLIST)
    parser.add_argument('--playlist-target-format', type=str,
                        dest='playlist_target_format', help="""Select
                        the desired playlist format at target. By
                        default, the same format is used at target as
                        the input playlists. This option will write
                        all playlists at target using the desired
                        format instead.""", choices=['m3u','m3u8','pls'])

    parser.add_argument('-d', '--dry', action='store_true',
                        dest='dry', help="""Dry run, only show input
                        files and targets, do not actually do any
                        transcoding.""")

    parser.add_argument('-f', '--force-transcode',
                        action='store_true', dest='force_transcode',
                        help="""Force transcoding, even if source file
                        is already in the same format as target file.
                        Useful if lowering quality for smaller file sizes.""")

    parser.add_argument('-n', '--no-transcode-for', metavar='EXT', type=str, action='append',
                        dest='no_transcode_for', help="""Input file extension to
                        avoid transcoding, such audio files will just be copied
                        instead. Option can occur more than once for multiple
                        file types.""")

    parser.add_argument('-o', '--overwrite-if-older', action='store_true',
                        dest='overwrite_if_older', help="""Overwrite existing
                        files at destination paths if mtime is older than source.""", default=False)

    parser.add_argument('-O', '--overwrite', action='store_true',
                        dest='overwrite', help="""Overwrite existing
                        files at destination paths.""", default=False)

    parser.add_argument('-c', '--codec', type=str, default='aac', help="""
                        Select audio codec. Use 'copy' to transfer without transcoding.""",
                        choices=FFMPEG_CODEC_OPTS)

    quality_options = parser.add_mutually_exclusive_group(required=False)
    quality_options.add_argument('-q', '--quality', dest='quality',
                                 help="""Set encoding quality, range
                                 and default value depends on chosen
                                 codec, see ffmpeg docs.""", type=int)

    quality_options.add_argument('-b', '--bitrate', dest='bitrate', help=
                        """Set encoding bitrate i kbit/s, range and default value depends on
                        chosen codec, see ffmpeg docs.""", type=int)

    parser.add_argument('-x', '--debug', dest='log_debug',
                        action='store_true', help="""Enable debug
                        logging.""", default=False)

    parser.add_argument('-w', '--disable-warn', dest='log_disable_warn',
                        action='store_true', help="""Disable warning logs, show only info and errors""", default=False)

    parser.add_argument('-v', '--version', action='version', version=VERSION)

    args = parser.parse_args()

    if args.log_debug:
        LOG.setLevel(logging.DEBUG)
    elif args.log_disable_warn:
        LOG.disableWarn()

    if not os.path.isdir(args.destdir):
        os.makedirs(args.destdir)
        LOG.info('Created destination directory: {}'.format(args.destdir))

    if not os.access(args.destdir, os.W_OK):
        LOG.error('Destination not a writable directory: {}'.format(args.destdir))
        sys.exit(1)

    if args.force_transcode and args.codec == 'copy':
        LOG.warn('Option -f/--force-transcode has no effect with codec \'copy\'')

    if args.force_transcode and args.no_transcode_for:
        LOG.warn('Option -n/--no-transcode-for overrides option -f/--force-transcode')

    if args.overwrite and args.overwrite_if_older:
        LOG.error('Options -O/--overwrite and -o/--overwrite-if-older cannot be combined')
        sys.exit(1)
    elif args.overwrite:
        overwrite_mode = OverwriteMode.OVERWRITE
    elif args.overwrite_if_older:
        overwrite_mode = OverwriteMode.OVERWRITE_IF_OLDER
    else:
        overwrite_mode = OverwriteMode.NO_OVERWRITE
        
    LOG.info('Using ffmpeg version {}'.format(ffmpeg_check_version()))

    transcode_spec = TranscodeSpec(args.codec, args.force_transcode, args.quality, args.bitrate)

    sources = scan_inputs(args.inputs, transcode_spec, args.no_transcode_for)
    if len(sources) == 0:
        LOG.info('No input audio files found, nothing to do, goodbye.')
        sys.exit(0)

    LOG.info('Sources provided a total of {} audio files'.format(len(sources)))
    LOG.info('Preparing target paths ..')
    work_units = prepare_work_units(sources, args.destdir,
                                    args.template, args.playlist_template, overwrite_mode)

    if args.dry:
        LOG.info('Dry run only, target paths and status:')
        for work_unit in work_units:
            print("{}, {}".format(work_unit.targetpath, work_unit.status))
        sys.exit(0)

    LOG.info('Starting work ..')

    def pool_worker_init():
        import signal
        global default_sigint_handler
        default_sigint_handler = signal.signal(signal.SIGINT, signal.SIG_IGN)

        multiprocessing.current_process().name = re.sub('^[a-zA-Z]+', 'Worker',
                                                        multiprocessing.current_process().name)
        LOG.debug('init {}'.format(multiprocessing.current_process().name))

    with multiprocessing.Pool(multiprocessing.cpu_count(), pool_worker_init) as pool:
        try:
            work_units = pool.map_async(execute_work_unit, work_units).get()
            failed = sum(map(lambda wu: 1 if wu.status.is_failed() else 0, work_units))
            skipped = sum(map(lambda wu: 1 if wu.status.is_skipped() else 0, work_units))
            completed = sum(map(lambda wu: 1 if wu.status.is_completed() else 0, work_units))
            LOG.info('{} transcodings completed, {} failed, {} skipped.'.format(completed, failed, skipped))

        except KeyboardInterrupt:
            LOG.warn('User interrupt')
            sys.exit(130)

    # Write any playlist files
    write_playlist_files(work_units, args.destdir, args.overwrite, args.playlist_target_format)

    LOG.info('Finished.')
